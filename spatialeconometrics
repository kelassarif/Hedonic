---
title: "Spatial econometrics: Ripple Effect and Sub-Markets"
author: "SARIFFUDDIN"
date: "26/08/2022"
output: rmdformats::readthedown
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r library, message=FALSE, warning=FALSE}
library(dplyr) 
library(cluster)  
library(factoextra) 
library(NbClust) 
library(stats)
library(reshape2)
library(readxl)
library(clValid)
library(corrplot)
library(rgdal)
library(spdep)
library(spatialreg)
library(FNN)
library(geosphere)
library(clustMixType)
library(cowplot)
library(tidyverse)
library(caret)
library(car)
library(GISTools)
library(GWmodel)
library(MASS)
library(tmap)
library(e1071)
library(knitr)
library(gclus)
library(kableExtra)
library(spgwr)
library(psych)
```

# A. Sub-markets analysis

## A.1. Data Distribution

```{r A}
data <- read_csv("data30Okt.csv")
data <- data %>% filter(Building_m >20, listrik > 400)
data <- mutate(data, l20 = ifelse(Building_m > 20, 1, 2))
ggplot(data, aes(xcoord, ycoord, color = factor(l20))) + geom_point()
data$X <- c(1:nrow(data))

datacluster <- data[,c(
                'Prop_Pri_1',
                'Land_m2', #structure
                'Building_m',
                'age_buildi', 
                'n_floors',
                'd.ceiling_gypsum',
                'd.ceiling_teakwood',
                'd.floor_ceramic',
                'd.floor_pc',
                'd.floor_marble',
                'd.floor_terrazzo',
                'd.wall_brick',
                'd.wall_wooden',
                'd.roof_clay',
                'd.roof_asbestos',
                'd.roof_zinc',
                'd.roof_ceramic',
                'mr_SD', #neighborhood/ locational quality
                'mr_SMP',
                'mr_SMA',
                'mr_UNIV', 
                'mr_TRAIN',
                'mr_BUS', 
                'mr_HSPT',
                'mr_MART',
                'mr_Mroad',
                'land_subsidence', #Environmental amenities/dis-amenities
                'flooded',
                'Kls_Lereng_ID')]

#Data Cleaning

z <- datacluster[,-c(1,1)]
means <- apply(z,2,mean)
sds <- apply(z,2,sd)
nor <- scale(z,center=means,scale=sds)
distance = dist(nor)

wss <- (nrow(nor)-1)*sum(apply(nor,2,var))

for (i in 2:20) wss[i] <- sum(kmeans(nor, centers=i)$withinss)
plot(1:20, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")

datadistshortset<-dist(nor,method = "euclidean")
hc1 <- hclust(datadistshortset, method = "complete" )
pamvshortset <- pam(datadistshortset,2, diss = FALSE)
```

## A.2. K-means clustering

```{r}
#Optimal number of clusters
fviz_nbclust(nor, kmeans, method = "silhouette")

#SIlhouette
fviz_nbclust(datacluster[, -c(1:5)], kmeans, method = "silhouette", k.max = 12) + 
    theme_minimal() + ggtitle("The Silhouette Plot")

#Elbow
fviz_nbclust(datacluster[, -c(1:5)], kmeans, method = "wss", k.max = 12) + 
    theme_minimal() + ggtitle("the Elbow Method")

#Cluster plot
k2 <- kmeans(nor, centers = 3, nstart = 25)
fviz_cluster(k2, data = nor)

clusplot(pamvshortset, shade = FALSE,labels=2,col.clus="blue",col.p="red",span=FALSE,main="Cluster Mapping",cex=1.2)
```

```{r}
set.seed(123)
k <- 3
kmeans1 <- kmeans(datacluster[, -c(1:5)], k)
summary(factor(kmeans1$cluster))
```

```{r}
#data %>% summary()
mean(data$ED_Sline)
```

```{r}
clusterdt <- data.frame(X = seq(1, nrow(data)), kmeans3 = kmeans1$cluster)
datacluster1 <- left_join(data, clusterdt) 
```

## A.3. Clustering data (unclean data)

```{r}
kmeansplot <- ggplot(datacluster1, 
              aes(x = xcoord, y = ycoord, color = factor(kmeans3))) +
              geom_point() +
              labs(color = "cluster")
kmeansplot
```

## A.4. Sub market (cleaned data)

```{r}
datacluster1 <- read.csv("data13.11.csv") #2014 - 2020 (datapanel), crosssection, filter tahun
kmeansplot <- ggplot(datacluster1, 
              aes(x = xcoord, y = ycoord, color = factor(kmeans3))) +
              geom_point() +
              labs(color = "cluster")
kmeansplot
```

# B. Ripple Effect Analysis

```{r}
spat.data <- read_csv("data13.11.csv")
spat.data$flooded[is.na(spat.data$flooded)] <- 0
spat.data <- spat.data %>% 
                filter(listrik > 400) %>%
                mutate(d.ceiling_gypsum = ifelse(m_ceiling == "Playwood/ Gypsum", 1, 0),
                       d.ceiling_teakwood = ifelse(m_ceiling == "Teak wood", 1, 0),
                       d.floor_ceramic = ifelse(m_floor == "Ceramic tiles", 1, 0),
                       d.floor_pc = ifelse(m_floor == "PC Tiles", 1, 0),
                       d.floor_marble = ifelse(m_floor == "Marble", 1, 0),
                       d.floor_terrazzo = ifelse(m_floor == "Terrazzo", 1, 0),
                       d.wall_brick = ifelse(m_wall == "Brick wall", 1, 0),
                       d.wall_wooden = ifelse(m_wall == "Wooden wall", 1, 0),
                       d.roof_clay = ifelse(m_roof == "Clay roof", 1, 0),
                       d.roof_asbestos = ifelse(m_roof == "Asbestos roof", 1, 0),
                       d.roof_zinc = ifelse(m_roof == "Zinc roof", 1, 0),
                       d.roof_ceramic = ifelse(m_roof == "Ceramic roof", 1, 0),
                       flooded = ifelse(flooded == 1, 1, 0))
#spat.data %>% summary()
#spat.data1 %>% select(starts_with('d.')) %>% distinct()
```

```{r}
coordinates(spat.data) <- ~ xcoord + ycoord
```

```{r}
plot(spat.data$xcoord, spat.data$ycoord)
```

# C. Hazardous areas (lower-priced properties)

```{r}
reg.eqTD = log(Prop_Pri_1) ~ 
                Land_m2 + #structure
                Building_m +
                age_buildi + 
                n_floors +
                d.ceiling_ + 
                d.ceilin_1 + 
                d.floor_ce + 
                d.floor_pc + 
                d.floor_te + 
                d.wall_bri +
                d.roof_cla + 
                d.roof_asb + 
                d.roof_zin + 
                mr_SD + #neighborhood/ locational quality
                mr_SMP +
                #mr_SMA + #VIF : 22.515267
                mr_UNIV + 
                mr_HSPT +
                mr_MART +
                mr_Mroad +
                count_SMA +
                land_subsi + #Environmental amenities/ dis-amenities
                #flooded + #VIF : 10.997353
                Kls_Lere_1
```

```{r}
spat.data <- filter(datacluster1, kmeans3 == 4)
coordinates(spat.data) <- ~ xcoord + ycoord
knea <- knearneigh(coordinates(spat.data), longlat = TRUE, k = 5)
queen.nb <- knn2nb(knea)

#View(queen.nb)
```

```{r}
queen.listw = nb2listw(queen.nb) #convert nb to listw type
listw1 = queen.listw
```

## C.1 Ordinary least squares (OLS)

```{r}
reg.OLS=lm(reg.eqTD,data=spat.data)
summary(reg.OLS)

#Detecting multicollinearity
car::vif(reg.OLS)
```

```{r}
lm.morantest(reg.OLS,listw1) # NO CORRELATION
lm.LMtests(reg.OLS,listw1,test=c(
  "LMerr", 
  "LMlag", 
  "RLMerr", 
  "RLMlag", 
  "SARMA"))
```

## C.2 Spatial Durbin Model (SDM)

```{r}
reg.SDM <- lagsarlm(reg.eqTD, data = spat.data, listw1, type="mixed")
summary(reg.SDM)

impacts(reg.SDM,listw=listw1)
```

## C.3 Spatial Autoregressive (SAR)

```{r}
#p=rho, T=theta, and L=lambda
#SLX Spatially Lagged X y=Xß+WXT+e
reg.SAR <- lagsarlm(reg.eqTD, data = spat.data, listw1)
summary(reg.SAR)

impacts(reg.SAR, listw = listw1)
```

## C.4 Spatially Lagged X (SLX)

```{r}
#p=rho, T=theta, and L=lambda
#SLX Spatially Lagged X y=Xß+WXT+e
reg.SLX=lmSLX(reg.eqTD,data=spat.data, listw1)

summary(reg.SLX)
impacts(reg.SLX,listw=listw1)

summary(impacts(reg.SLX,listw=listw1,R=500),zstats=TRUE) #Add zstats,pvals; R=500 not needed for SLX
```

## C.5 Spatial Autoregressive With Autoregressive Disturbances (SARAR)

```{r}
#p=rho, T=theta, and L=lambda
#SLX Spatially Lagged X y=Xß+WXT+e
reg.SARAR=sacsarlm(reg.eqTD,data=spat.data, listw1)

summary(reg.SARAR)
impacts(reg.SARAR,listw=listw1)

```

## C.6 Spatial Error Model (SEM)

```{r}
reg.SEM <- errorsarlm(reg.eqTD, data=spat.data, listw1)
summary(reg.SEM)

HausmanTest <- Hausman.test(reg.SEM)
HausmanTest
```

## C.7 Scatterplot

```{r}
scatter.data = datacluster1 %>% filter(kmeans3 == 4)

scatterplot(Prop_Pri_1 ~ Building_m, data = scatter.data)
scatterplot(Prop_Pri_1 ~ Land_m2, data = scatter.data)
```

## C.8 Maximum likelihood estimation

```{r}
LR.sarlm(reg.SDM, reg.SAR)
LR.sarlm(reg.SDM, reg.SARAR)
LR.sarlm(reg.SAR, reg.SARAR)
```

## C.9 Sub-market description

```{r}
data.sub1= datacluster1 %>% dplyr::select(
                       Prop_Pri_1,
                       Land_m2,
                       Building_m, 
                       age_buildi, 
                       n_floors,
                       d.ceiling_, 
                       d.ceilin_1,
                       d.floor_ce, 
                       d.floor_pc, 
                       d.floor_te, 
                       d.wall_bri,
                       d.roof_cla, 
                       d.roof_asb, 
                       d.roof_zin, 
                       mr_SD,
                       mr_SMP,
                       mr_SMA,
                       mr_UNIV, 
                       mr_HSPT,
                       mr_MART,
                       mr_Mroad,
                       count_SMA,
                       flooded,
                       land_subsi,
                       listrik,
                       Kls_Lere_1,
                       kmeans3)
data.sub1= data.sub1 %>% filter(kmeans3==4)
ncol(data.sub1)
nrow(data.sub1)

data.sub1=data.sub1[,1:24]
head(data.sub1)

#Kaiser-Meyer-Olkin
data.sub1=scale(data.sub1)
KMO(data.sub1)

#Factor Analysis
ev <- eigen(cor(data.sub1)) # get eigenvalues
ev$values

scree(data.sub1, pc=FALSE)

fa.parallel(data.sub1, fa="fa")

Nfacs <- 3  # This is for four factors. You can change this as needed.
fit <- factanal(data.sub1, Nfacs, rotation="promax")
print(fit, digits=2, cutoff=0.3, sort=TRUE)

loads <- fit$loadings
fa.diagram(loads)

dim(fit$loadings)
round(fit$loadings[ 1:24,], 2)
```
